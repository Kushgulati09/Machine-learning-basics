{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wzXcqu7ycJcF"
      },
      "source": [
        "# Name: Kush Gulati\n",
        "# Roll number: MS20014"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8sLq_E0HAANb"
      },
      "source": [
        "import numpy as np\n",
        "import os\n",
        "import pandas as pd\n",
        "class WSJ():\n",
        "    \"\"\" Load the WSJ speech dataset\n",
        "        \n",
        "        Ensure WSJ_PATH is path to directory containing \n",
        "        all data files (.npy) provided on Kaggle.\n",
        "        \n",
        "        Example usage:\n",
        "            loader = WSJ()\n",
        "            trainX, trainY = loader.train\n",
        "            assert(trainX.shape[0] == 24590)\n",
        "            \n",
        "    \"\"\"\n",
        "  \n",
        "    def __init__(self):\n",
        "        os.environ['WSJ_PATH'] = '/content/drive/MyDrive'\n",
        "        self.dev_set = None\n",
        "        self.train_set = None\n",
        "        self.test_set = None\n",
        "  \n",
        "    @property\n",
        "    def dev(self):\n",
        "        if self.dev_set is None:\n",
        "            self.dev_set = load_raw(os.environ['WSJ_PATH'], 'dev')\n",
        "        return self.dev_set\n",
        "\n",
        "    @property\n",
        "    def train(self):\n",
        "        if self.train_set is None:\n",
        "            self.train_set = load_raw(os.environ['WSJ_PATH'], 'train')\n",
        "        return self.train_set\n",
        "  \n",
        "    @property\n",
        "    def test(self):\n",
        "        if self.test_set is None:\n",
        "            self.test_set = (np.load(os.path.join(os.environ['WSJ_PATH'], 'test.npy'), encoding='bytes'), None)\n",
        "        return self.test_set\n",
        "    \n",
        "def load_raw(path, name):\n",
        "    return (\n",
        "        np.load(os.path.join(path, '{}.npy'.format(name)), encoding='bytes',allow_pickle=True), \n",
        "        np.load(os.path.join(path, '{}_labels.npy'.format(name)), encoding='bytes',allow_pickle=True)\n",
        "    )\n",
        "#loading the development data\n",
        "x,y=WSJ().dev"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_qpJJPCLAvxF"
      },
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras import Model, layers\n",
        "from tensorflow.keras.layers import *\n",
        "from tensorflow.keras.models import Sequential\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "70VK9XX6k8oC"
      },
      "source": [
        "## MLP"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VKP4ipisSqqZ"
      },
      "source": [
        "#code for a MLP with 4 hidde layers using relu as activation function.\n",
        "#architecture is [1024,512,512,256]\n",
        "\n",
        "def MLP(inp_dim,noc=138): \n",
        "  model=Sequential()\n",
        "  model.add(Dense(input_shape=inp_dim,units=2048, name='dense-1'))\n",
        "  model.add(Activation('relu'))\n",
        "  model.add(Dense(units=1024))\n",
        "  model.add(Activation('relu'))\n",
        "  model.add(Dense(units=512))\n",
        "  model.add(Activation('relu')) \n",
        "  model.add(Dense(units=512))\n",
        "  model.add(Activation('relu')) \n",
        "  model.add(Dense(units=256))\n",
        "  model.add(Activation('relu'))\n",
        "  model.add(Dense(units=noc,activation='softmax'))\n",
        "  return model"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a7xzcKxwkkW9"
      },
      "source": [
        "#data split into train and test data\n",
        "x,x_test,y,y_test=train_test_split(x,y)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nHpY3exmVqTL"
      },
      "source": [
        "y=tf.keras.utils.to_categorical(y)\n",
        "y_test=tf.keras.utils.to_categorical(y_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jx9r_t91Vg1a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "487fb242-bf7b-4074-b6c5-04a5633df230"
      },
      "source": [
        "mlp=MLP(x[0].shape)\n",
        "base_learning_rate=0.00001\n",
        "mlp.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=base_learning_rate),\n",
        "            loss=tf.keras.losses.categorical_crossentropy,\n",
        "            metrics=['accuracy'])\n",
        "mlp.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense-1 (Dense)              (None, 2048)              83968     \n",
            "_________________________________________________________________\n",
            "activation (Activation)      (None, 2048)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 1024)              2098176   \n",
            "_________________________________________________________________\n",
            "activation_1 (Activation)    (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 512)               524800    \n",
            "_________________________________________________________________\n",
            "activation_2 (Activation)    (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 512)               262656    \n",
            "_________________________________________________________________\n",
            "activation_3 (Activation)    (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 256)               131328    \n",
            "_________________________________________________________________\n",
            "activation_4 (Activation)    (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_4 (Dense)              (None, 138)               35466     \n",
            "=================================================================\n",
            "Total params: 3,136,394\n",
            "Trainable params: 3,136,394\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9lbXDC5Dlr5n",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c77bc3ae-2d84-4fec-f4dd-c74a16a7f62d"
      },
      "source": [
        "historymlp=mlp.fit(x,y,batch_size=200,validation_data=(x_test,y_test),verbose=True,epochs=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "36556/36556 [==============================] - 354s 10ms/step - loss: 2.6614 - accuracy: 0.3169 - val_loss: 2.6772 - val_accuracy: 0.3142\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PxmXSpWNliM0"
      },
      "source": [
        "#code for the csv file\n",
        "y_test=np.argmax(mlp.predict(WSJ().test[0]),axis=-1)\n",
        "y_test=pd.DataFrame(y_test, columns=['label'])\n",
        "y_test['id']=range(4620355)\n",
        "y_test.to_csv('/content/drive/MyDrive/ms20014_idc410_assign_5.csv',index=False)"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
